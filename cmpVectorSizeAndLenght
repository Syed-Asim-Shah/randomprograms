;Syed Asim Shah
;1162852
;3F03 Assignment 3

%define type	[ebp + 12]
%define v	[ebp + 8 ]	

segment .data

segment .bss
vcount 		resd 1 ;Number of Elements in Vector Array
scount		resd 1 ;Counter 
temp		resd 1
temp2		resd 1
temp3		resd 1
array 		resd 100 ;Array used to hold the lenght/sum based on type chosen
new		resd 100 ;Blank array to hold sorted vectors


segment .text
	global sort_vectors
sort_vectors:
	
	enter 0,0
	pusha

	mov ecx,0
	mov ebx,0
	mov [vcount], 	dword 0

	mov edi,v;  Saving address of Pointer Array to edi
;--------------------------------------------------------------------------------

;This block of code goes through each array that is pointed to by each element in the pointer array. The number of elements in the Pointer Array are counted in Loop1. While going through the individual elements of the pointed to arrays , Loop_1 keeps adding the sum/lenght based on the type to an array called "array". It stores these values in the same position of its main pointer i.e if pointer 2 is in [edi+4] , then the sum of the array pointed to by that pointer will be saved in [array+4].

Loop1:
	mov edx,0
	mov esi, [edi+ebx]
	cmp esi,0
	je end_mid
	add [vcount],dword 1
	add ebx,4
	jmp Loop2
Loop2:
	mov ax, [esi+edx]
	movsx eax,ax
	cmp ax,-1
	je Loop_1
	cmp type,byte 0
	je type_0
	add ecx,eax
midloop:
	add edx,2
	jmp Loop2	
Loop_1:
	mov [array+ebx-4],ecx	
	mov ecx,0
	jmp Loop1
type_0:
	inc ecx
	jmp midloop
;--------------------------------------------------------------------------------

;This block of code compares each element in the sum/lenght array called "array" and goes through it until it has found the highest value.The pointer that correponds to this highest value in the pointer array is then added to the last empty location of the new array.Then the highest value in "array" is swapped with a -1. This loops until all the max values have been set to -1 in "array". The "new" array now contains the sorted vector.

end_mid:
	mov edx,0	
	mov eax,[vcount]
	mov [scount],eax	
end_mid_mid:
	cmp [scount], dword 0
	je swap
	mov ebx, [vcount]
sort_alg:
	mov eax,1
	mov ecx , [array + edx]
midloop_2:
	cmp ebx ,1
	je found_max
	cmp ecx , [array+4*eax+edx]
	jnl n_greater
	dec ebx
	mov [temp], eax
	mov [temp2],ebx
	mov [temp3],edx
	mov edx,0
	mov ebx,4
	mul ebx
	mov edx,[temp3]
	add eax,edx
	mov edx,eax
	mov eax,[temp]
	mov ebx,[temp2]
	jmp sort_alg
n_greater:
	dec ebx
	inc eax
	jmp midloop_2
found_max:
	mov eax,0
	mov eax,[scount]
	dec eax
	mov edi,v
	mov ecx,[edi+edx]
	mov [new + 4*eax],ecx
	mov [array+edx],dword -1
	mov [scount],eax
	mov edx,0
	jmp end_mid_mid
;------------------------------------------------------------------------------	

;This block of code replaces all the values in the pointer array to the corresponding sorted values in the "new" array.

swap:
	mov ecx,0
swap_1:
	cmp ecx,[vcount]
	je end_loop
	mov eax,[new+4*ecx]
	mov ebx,v
	mov [ebx+4*ecx],eax
	inc ecx
	jmp swap_1
;------------------------------------------------------------------------------	


end_loop:	
	popa
	leave
	ret
